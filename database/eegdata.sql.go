// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: eegdata.sql

package database

import (
	"context"
	"encoding/json"
	"time"
)

const getEEGDataByEEGSessionId = `-- name: GetEEGDataByEEGSessionId :many
SELECT id, session_id, offset, user_id, collected_at, attention, meditation, blink_strength, alpha1, alpha2, beta1, beta2, gamma1, gamma2, delta, theta, raw FROM ` + "`" + `eeg_data` + "`" + `
WHERE session_id = ? LIMIT ?
`

type GetEEGDataByEEGSessionIdParams struct {
	SessionID uint64 `json:"session_id"`
	Limit     int32  `json:"limit"`
}

func (q *Queries) GetEEGDataByEEGSessionId(ctx context.Context, arg GetEEGDataByEEGSessionIdParams) ([]EegDatum, error) {
	rows, err := q.db.QueryContext(ctx, getEEGDataByEEGSessionId, arg.SessionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EegDatum{}
	for rows.Next() {
		var i EegDatum
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Offset,
			&i.UserID,
			&i.CollectedAt,
			&i.Attention,
			&i.Meditation,
			&i.BlinkStrength,
			&i.Alpha1,
			&i.Alpha2,
			&i.Beta1,
			&i.Beta2,
			&i.Gamma1,
			&i.Gamma2,
			&i.Delta,
			&i.Theta,
			&i.Raw,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEEGData = `-- name: InsertEEGData :exec
INSERT INTO ` + "`" + `eeg_data` + "`" + `
(session_id, offset, user_id, collected_at, attention,
 meditation, blink_strength, alpha1, alpha2, beta1, beta2, gamma1, gamma2, delta, theta, raw)
VALUES(
     ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
)
`

type InsertEEGDataParams struct {
	SessionID     uint64          `json:"session_id"`
	Offset        uint32          `json:"offset"`
	UserID        uint64          `json:"user_id"`
	CollectedAt   time.Time       `json:"collected_at"`
	Attention     uint32          `json:"attention"`
	Meditation    uint32          `json:"meditation"`
	BlinkStrength uint32          `json:"blink_strength"`
	Alpha1        uint32          `json:"alpha1"`
	Alpha2        uint32          `json:"alpha2"`
	Beta1         uint32          `json:"beta1"`
	Beta2         uint32          `json:"beta2"`
	Gamma1        uint32          `json:"gamma1"`
	Gamma2        uint32          `json:"gamma2"`
	Delta         uint32          `json:"delta"`
	Theta         uint32          `json:"theta"`
	Raw           json.RawMessage `json:"raw"`
}

func (q *Queries) InsertEEGData(ctx context.Context, arg InsertEEGDataParams) error {
	_, err := q.db.ExecContext(ctx, insertEEGData,
		arg.SessionID,
		arg.Offset,
		arg.UserID,
		arg.CollectedAt,
		arg.Attention,
		arg.Meditation,
		arg.BlinkStrength,
		arg.Alpha1,
		arg.Alpha2,
		arg.Beta1,
		arg.Beta2,
		arg.Gamma1,
		arg.Gamma2,
		arg.Delta,
		arg.Theta,
		arg.Raw,
	)
	return err
}
