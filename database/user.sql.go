// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getLatestUser = `-- name: GetLatestUser :one
SELECT  id, username, mobile, email, avatar, hashed_password, is_email_verified, password_changed_at, created_at, updated_username_at, updated_avatar_at, updated_mobile_at, updated_email_at FROM ` + "`" + `users` + "`" + ` WHERE id = last_insert_id()
`

func (q *Queries) GetLatestUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getLatestUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Mobile,
		&i.Email,
		&i.Avatar,
		&i.HashedPassword,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedUsernameAt,
		&i.UpdatedAvatarAt,
		&i.UpdatedMobileAt,
		&i.UpdatedEmailAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, mobile, email, avatar, hashed_password, is_email_verified, password_changed_at, created_at, updated_username_at, updated_avatar_at, updated_mobile_at, updated_email_at FROM ` + "`" + `users` + "`" + ` WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Mobile,
		&i.Email,
		&i.Avatar,
		&i.HashedPassword,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedUsernameAt,
		&i.UpdatedAvatarAt,
		&i.UpdatedMobileAt,
		&i.UpdatedEmailAt,
	)
	return i, err
}

const getUserByMobile = `-- name: GetUserByMobile :one
SELECT id, username, mobile, email, avatar, hashed_password, is_email_verified, password_changed_at, created_at, updated_username_at, updated_avatar_at, updated_mobile_at, updated_email_at FROM ` + "`" + `users` + "`" + ` WHERE mobile = ? LIMIT 1
`

func (q *Queries) GetUserByMobile(ctx context.Context, mobile string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMobile, mobile)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Mobile,
		&i.Email,
		&i.Avatar,
		&i.HashedPassword,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedUsernameAt,
		&i.UpdatedAvatarAt,
		&i.UpdatedMobileAt,
		&i.UpdatedEmailAt,
	)
	return i, err
}

const getUserByUid = `-- name: GetUserByUid :one
SELECT id, username, mobile, email, avatar, hashed_password, is_email_verified, password_changed_at, created_at, updated_username_at, updated_avatar_at, updated_mobile_at, updated_email_at FROM ` + "`" + `users` + "`" + ` WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByUid(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUid, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Mobile,
		&i.Email,
		&i.Avatar,
		&i.HashedPassword,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedUsernameAt,
		&i.UpdatedAvatarAt,
		&i.UpdatedMobileAt,
		&i.UpdatedEmailAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO ` + "`" + `users` + "`" + ` (USERNAME, MOBILE, EMAIL,avatar,
                     HASHED_PASSWORD, IS_EMAIL_VERIFIED, PASSWORD_CHANGED_AT, CREATED_AT,
                     UPDATED_USERNAME_AT, UPDATED_AVATAR_AT, UPDATED_MOBILE_AT, UPDATED_EMAIL_AT)
VALUES (?,?,?,?,?,?,?,?,?,?,?,?)
`

type InsertUserParams struct {
	Username          string    `json:"username"`
	Mobile            string    `json:"mobile"`
	Email             string    `json:"email"`
	Avatar            string    `json:"avatar"`
	HashedPassword    string    `json:"hashed_password"`
	IsEmailVerified   bool      `json:"is_email_verified"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedUsernameAt time.Time `json:"updated_username_at"`
	UpdatedAvatarAt   time.Time `json:"updated_avatar_at"`
	UpdatedMobileAt   time.Time `json:"updated_mobile_at"`
	UpdatedEmailAt    time.Time `json:"updated_email_at"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Username,
		arg.Mobile,
		arg.Email,
		arg.Avatar,
		arg.HashedPassword,
		arg.IsEmailVerified,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.UpdatedUsernameAt,
		arg.UpdatedAvatarAt,
		arg.UpdatedMobileAt,
		arg.UpdatedEmailAt,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE ` + "`" + `users` + "`" + ` SET
username = COALESCE(?,username),
avatar = COALESCE(?,avatar),
mobile = COALESCE(?,mobile),
email = COALESCE(?,email),
hashed_password = COALESCE(?,hashed_password),
is_email_verified = COALESCE(?,is_email_verified),
password_changed_at = COALESCE(?,password_changed_at),
updated_email_at = COALESCE(?,updated_email_at),
updated_mobile_at = COALESCE(?,updated_mobile_at),
updated_username_at = COALESCE(?,updated_username_at),
updated_avatar_at = COALESCE(?,updated_avatar_at)
WHERE id = ?
`

type UpdateUserParams struct {
	Username          sql.NullString `json:"username"`
	Avatar            sql.NullString `json:"avatar"`
	Mobile            sql.NullString `json:"mobile"`
	Email             sql.NullString `json:"email"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	IsEmailVerified   sql.NullBool   `json:"is_email_verified"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	UpdatedEmailAt    sql.NullTime   `json:"updated_email_at"`
	UpdatedMobileAt   sql.NullTime   `json:"updated_mobile_at"`
	UpdatedUsernameAt sql.NullTime   `json:"updated_username_at"`
	UpdatedAvatarAt   sql.NullTime   `json:"updated_avatar_at"`
	ID                uint64         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Avatar,
		arg.Mobile,
		arg.Email,
		arg.HashedPassword,
		arg.IsEmailVerified,
		arg.PasswordChangedAt,
		arg.UpdatedEmailAt,
		arg.UpdatedMobileAt,
		arg.UpdatedUsernameAt,
		arg.UpdatedAvatarAt,
		arg.ID,
	)
	return err
}
